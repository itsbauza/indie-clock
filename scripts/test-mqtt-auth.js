const mqtt = require('mqtt');

async function testMQTTAuth() {
  // Test credentials - these would be generated by the device registration
  const testDevice = {
    username: 'awtrix_testuser_device123',
    password: 'testpassword123',
    topicPrefix: 'awtrix_testuser_device123'
  };

  console.log('🔐 Testing MQTT Authentication and Topic Access\n');
  console.log(`📱 Device: ${testDevice.username}`);
  console.log(`🔑 Password: ${testDevice.password}`);
  console.log(`📡 Topic Prefix: ${testDevice.topicPrefix}\n`);

  try {
    // Test 1: Connect with device credentials
    console.log('1️⃣ Testing connection with device credentials...');
    const deviceClient = mqtt.connect('mqtt://localhost:1883', {
      username: testDevice.username,
      password: testDevice.password,
      clientId: `test-device-${Date.now()}`,
      clean: true,
      connectTimeout: 5000
    });

    deviceClient.on('connect', () => {
      console.log('✅ Device connected successfully!');
      
      // Test 2: Subscribe to own topics
      console.log('\n2️⃣ Testing subscription to own topics...');
      const ownTopics = [
        `${testDevice.topicPrefix}/github-contributions`,
        `${testDevice.topicPrefix}/status`,
        `${testDevice.topicPrefix}/notify`
      ];

      ownTopics.forEach(topic => {
        deviceClient.subscribe(topic, { qos: 0 }, (err) => {
          if (err) {
            console.error(`❌ Failed to subscribe to ${topic}:`, err.message);
          } else {
            console.log(`✅ Subscribed to: ${topic}`);
          }
        });
      });

      // Test 3: Try to subscribe to other topics (should fail)
      console.log('\n3️⃣ Testing subscription to other topics (should fail)...');
      const otherTopics = [
        'awtrix_otheruser_device456/github-contributions',
        'users/otheruser/status',
        'backend/system'
      ];

      otherTopics.forEach(topic => {
        deviceClient.subscribe(topic, { qos: 0 }, (err) => {
          if (err) {
            console.log(`✅ Correctly denied access to: ${topic}`);
          } else {
            console.log(`⚠️  Unexpectedly allowed access to: ${topic}`);
          }
        });
      });

      // Test 4: Publish to own topics
      console.log('\n4️⃣ Testing publishing to own topics...');
      const testMessage = {
        text: 'Test message from device',
        color: '#00ff00',
        timestamp: new Date().toISOString()
      };

      ownTopics.forEach(topic => {
        deviceClient.publish(topic, JSON.stringify(testMessage), { qos: 1 }, (err) => {
          if (err) {
            console.error(`❌ Failed to publish to ${topic}:`, err.message);
          } else {
            console.log(`✅ Published to: ${topic}`);
          }
        });
      });

      // Test 5: Try to publish to other topics (should fail)
      console.log('\n5️⃣ Testing publishing to other topics (should fail)...');
      otherTopics.forEach(topic => {
        deviceClient.publish(topic, JSON.stringify(testMessage), { qos: 1 }, (err) => {
          if (err) {
            console.log(`✅ Correctly denied publish to: ${topic}`);
          } else {
            console.log(`⚠️  Unexpectedly allowed publish to: ${topic}`);
          }
        });
      });

      // Listen for messages
      deviceClient.on('message', (topic, message) => {
        console.log(`📨 Received message on ${topic}:`, message.toString());
      });

      // Close connection after tests
      setTimeout(() => {
        console.log('\n🏁 Tests completed. Closing connection...');
        deviceClient.end();
        process.exit(0);
      }, 3000);

    });

    deviceClient.on('error', (error) => {
      console.error('❌ Device connection error:', error.message);
      process.exit(1);
    });

    deviceClient.on('close', () => {
      console.log('🔌 Device connection closed');
    });

  } catch (error) {
    console.error('💥 Error during MQTT auth test:', error);
    process.exit(1);
  }
}

// Run the test
testMQTTAuth(); 