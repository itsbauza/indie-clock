services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: indie-clock-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GITHUB_APP_CLIENT_ID=${GITHUB_APP_CLIENT_ID}
      - GITHUB_APP_CLIENT_SECRET=${GITHUB_APP_CLIENT_SECRET}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_API=http://rabbitmq:15672/api
      - RABBITMQ_ADMIN_USER=${RABBITMQ_ADMIN_USER}
      - RABBITMQ_ADMIN_PASS=${RABBITMQ_ADMIN_PASS}
      - MQTT_URL=mqtt://rabbitmq:1883
      - MQTT_USERNAME=${RABBITMQ_ADMIN_USER}
      - MQTT_PASSWORD=${RABBITMQ_ADMIN_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["sh", "-c", "npx prisma migrate deploy && node server.js"]
    networks:
      - indie-clock-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: indie-clock-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - indie-clock-network

  # RabbitMQ with Management Plugin and MQTT Support
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: indie-clock-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_ADMIN_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_ADMIN_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
      # Plugin setup
      RABBITMQ_ENABLED_PLUGINS: "rabbitmq_management,rabbitmq_management_agent,rabbitmq_mqtt"
      RABBITMQ_ENABLED_PLUGINS_FILE: /var/lib/rabbitmq/enabled_plugins.conf
      # MQTT configuration
      RABBITMQ_MQTT_LISTENERS_TCP_DEFAULT: 1883
      RABBITMQ_MQTT_ALLOW_ANONYMOUS: false
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - indie-clock-network

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  indie-clock-network:
    driver: bridge
